/*  CHAP 1. ARRAYS AND STRINGS  */

1.1 is Unique
    Implement an algorithm to determine if a string has all unique characters. What if you cannot use additional data structure?

1.2 Check Permutation
    Given two strings, write a method to decide if one is a permutation of the other

1.3 URLify
    Write a method to replace all spaces in a string with '%20'. You may assume that the string has sufficient space at the end to hold the additional characters,
    and that you are given the "true" length of the string

1.4 Palindrome Permutation
    Given a string, write a function to check if it is a permutation of a palindrome.
    A palindrome is a word or phrase that is the same forwards and backwords.
    A permutation is a rearrangement of letters.
    The palindrome does not need to be limited to just dictionary words. You can ignore casing and non-letter characters

1.5 One Away
    There are three types of edits that can be performed on strings: insert a character, remove a character, or replace a character.
    Given two strings write a function to check if they are one edit(or Zero edit) away

1.6 String Compression
    Implement a method to perform basic string compresion using the counts of repeated characters.
    For example, the string aabcccccaaa would become a2b1c5a3. if the "compressed" string would not become smaller than the original string, your method should return the original string.
    You can assume the string has only uppercase and lowercase letters(a-Z)

1.7 Rotate Matrix
    Given an image represented by an N x N matrix, where each pixel in the image is represented by an integer, write a method to rotate the image by 90 degrees.
    Can you do this in place?

1.8 Zero Matrix
    Write an algorithm such that if an element in an MxN matrix is 0. its entire row and column are set 0

1.9 String rotation
    Assume you have a method isSubstring which checks if one word is a substring of another.
    Given two strings, s1 and s2, write code to check if s2 is a rotation of s1 using only one call to isSubstring

/*   CHAP 2. Linked Lists   */

2.1 Remove Dups
    Write code to remove Dulicates from an unsorted linked list
    How would you solve this problem if a temporary buffer is not allowed?

2.2 Return Kth to Last
    Implement an algorithm to find the kth to last element of a signly linked list

2.3 Delete Middle Node
    Implement an algorithm to delete a node in the middle (i.e., any node but the first and last node, not necessarily the exact middle)
    of a singly linked list, given only access to that node

2.4 Partition
    Write code to partition a linked list around a value x, such that all nodes less than x come before all nodes greater than or equal to x
    IMPORTANT: The partition element x can appear anywhere in the "right partition"; it does not need to appear between the left and right partitions.
   
2.5 Sum Lists
    You have two numbers represented by a linked list, where each node contains a single digit.
    The digits are stored in reverse order, such that the 1's digit is at the head of the list.
    Write a function that adds the two numbers and returns the sum as a linked list

2.6 Palindrom
    Implement a function to check if a linked list is a palindrome

2.7 Intersection
    Given two linked lists, determine if the two lists intersect. Return the intersectiong node.
    Note that the intersection is defined based on reference, not value.
    That is, if the kthe node of the first linked list is the exact same node (by reference) as the jth node of the second linked list, then they are intersecting

2.8 Loop Detection
    Given a linked list which might contain a loop, implement an algorithm that returns the node at the beginning of the loop(if one exists)

/*  Chap 4. Trees and Graphs    */

4.1 Route Between Nodes
    Given a directed graph and two nodes(S and E), design an algorithm to find out wheather there is a route from S to E

