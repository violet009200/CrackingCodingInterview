/*  CHAP 1. ARRAYS AND STRINGS  */

1.1 is Unique
    Implement an algorithm to determine if a string has all unique characters. What if you cannot use additional data structure?

1.2 Check Permutation
    Given two strings, write a method to decide if one is a permutation of the other

1.3 URLify
    Write a method to replace all spaces in a string with '%20'. You may assume that the string has sufficient space at the end to hold the additional characters,
    and that you are given the "true" length of the string

1.4 Palindrome Permutation
    Given a string, write a function to check if it is a permutation of a palindrome.
    A palindrome is a word or phrase that is the same forwards and backwords.
    A permutation is a rearrangement of letters.
    The palindrome does not need to be limited to just dictionary words. You can ignore casing and non-letter characters

1.5 One Away
    There are three types of edits that can be performed on strings: insert a character, remove a character, or replace a character.
    Given two strings write a function to check if they are one edit(or Zero edit) away

1.6 String Compression
    Implement a method to perform basic string compresion using the counts of repeated characters.
    For example, the string aabcccccaaa would become a2b1c5a3. if the "compressed" string would not become smaller than the original string, your method should return the original string.
    You can assume the string has only uppercase and lowercase letters(a-Z)

1.7 Rotate Matrix
    Given an image represented by an N x N matrix, where each pixel in the image is represented by an integer, write a method to rotate the image by 90 degrees.
    Can you do this in place?

/*   CHAP 2.    */